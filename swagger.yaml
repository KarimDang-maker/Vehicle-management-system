openapi: 3.0.0
info:
  title: Vehicle & User Management API
  description: API pour gérer une flotte de véhicules et les utilisateurs (CRUD complet)
  version: 2.0.0

servers:
  - url: http://localhost:3000
    description: Serveur local

paths:
  # Endpoints pour les véhicules (existants)
  /api/vehicles:
    get:
      summary: Récupérer tous les véhicules
      responses:
        '200':
          description: Liste des véhicules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'

    post:
      summary: Créer un nouveau véhicule
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleInput'
      responses:
        '201':
          description: Véhicule créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'

  # ... (autres endpoints véhicules existants)

  # Nouveaux endpoints pour les utilisateurs
  /api/auth/login:
    post:
      summary: Authentification utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: Authentification réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Identifiants invalides

  /api/auth/refresh-token:
    post:
      summary: Rafraîchir le token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
      responses:
        '200':
          description: Nouveau token généré
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          description: Token invalide ou expiré

  /api/users:
    post:
      summary: Créer un nouvel utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: Utilisateur créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Données invalides

    get:
      summary: Lister tous les utilisateurs (admin seulement)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des utilisateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Accès non autorisé

  /api/users/{id}:
    put:
      summary: Mettre à jour un utilisateur
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Utilisateur mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Accès non autorisé
        '404':
          description: Utilisateur non trouvé

components:
  schemas:
    # Schémas existants pour les véhicules
    Vehicle:
      type: object
      properties:
        id:
          type: integer
        marque:
          type: string
        model:
          type: string
        immatriculation:
          type: string
        annee:
          type: integer
        prixLocation:
          type: number
        disponible:
          type: boolean

    VehicleInput:
      type: object
      required:
        - marque
        - model
        - immatriculation
        - annee
        - prixLocation
      properties:
        marque:
          type: string
        model:
          type: string
        immatriculation:
          type: string
        annee:
          type: integer
        prixLocation:
          type: number
        disponible:
          type: boolean

    # Nouveaux schémas pour les utilisateurs
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]

    UserInput:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
          enum: [user, admin]
          default: user

    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT